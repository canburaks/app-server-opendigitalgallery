/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateVariantArgs } from "./CreateVariantArgs";
import { UpdateVariantArgs } from "./UpdateVariantArgs";
import { DeleteVariantArgs } from "./DeleteVariantArgs";
import { VariantFindManyArgs } from "./VariantFindManyArgs";
import { VariantFindUniqueArgs } from "./VariantFindUniqueArgs";
import { Variant } from "./Variant";
import { Product } from "../../product/base/Product";
import { VariantService } from "../variant.service";

@graphql.Resolver(() => Variant)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class VariantResolverBase {
  constructor(
    protected readonly service: VariantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "read",
    possession: "any",
  })
  async _variantsMeta(
    @graphql.Args() args: VariantFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Variant])
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "read",
    possession: "any",
  })
  async variants(
    @graphql.Args() args: VariantFindManyArgs
  ): Promise<Variant[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Variant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "read",
    possession: "own",
  })
  async variant(
    @graphql.Args() args: VariantFindUniqueArgs
  ): Promise<Variant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Variant)
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "create",
    possession: "any",
  })
  async createVariant(
    @graphql.Args() args: CreateVariantArgs
  ): Promise<Variant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Variant)
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "update",
    possession: "any",
  })
  async updateVariant(
    @graphql.Args() args: UpdateVariantArgs
  ): Promise<Variant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Variant)
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "delete",
    possession: "any",
  })
  async deleteVariant(
    @graphql.Args() args: DeleteVariantArgs
  ): Promise<Variant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(@graphql.Parent() parent: Variant): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
